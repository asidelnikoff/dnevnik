volumes:
  users_pgdata:
  tasks_pgdata:
  schedule_pgdata:
  journal_pgdata:
  kafka1_data:
  kafka_controller_data:

networks:
  users_net:
    driver: bridge
  tasks_net:
    driver: bridge
  schedule_net:
    driver: bridge
  journal_net:
    driver: bridge
  kafka_net:
    driver: bridge
  gateway_net:
    driver: bridge

services:
  journal-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5508:5432
    volumes:
      - journal_pgdata:/var/lib/postgresql/data
    networks:
      - journal_net
  dnevnik.journal:
    build:
      context: ./journal-ms/src
      dockerfile: Dnevnik.Journal/Dockerfile
    ports:
      - 5507:8080
    environment:
      - ConnectionStrings__JournalConnection=Host=journal-db;Port=5432;Database=postgres;Username=postgres;Password=postgres;MaxPoolSize=500;MinPoolSize=250;ConnectionIdleLifetime=60;Timeout=30;ConnectionPruningInterval=10;
    networks:
      - journal_net
    depends_on:
      - journal-db
#  # Настройка Api Gateway
#  dnevnik.apigateway:
#    container_name: gateway
#    build:
#      context: ./api-gateway
#      dockerfile: ./src/Dnevnik.ApiGateway/Dockerfile
#    ports:
#      - "5002:8080"
#    networks:
#      - gateway_net
#  
  # Настройка микросервиса домашних заданий
  tasks-ms: # Микросервис домашних заданий
    restart: unless-stopped
    container_name: tasks-ms
    build: ./tasks-ms
    ports:
      - "5003:8090"
    volumes:
      - ./tasks-ms-config/config:/etc/task
    networks:
      - tasks_net
      - kafka_net
      - gateway_net
    depends_on:
      - tasks-db
      - kafka
  tasks-db: # БД микросервиса домашних заданий
    image: docker.io/bitnami/postgresql:16
    user: root
    ports:
      - "5433:5432"
    volumes:
      - tasks_pgdata:/bitnami/postgresql
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - tasks_net
  
  # Настройка микросервиса пользователей
  users-ms:
    container_name: users-ms
    build: ./users-ms
    ports:
      - "5004:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@users-db:5432/user_api
    networks:
      - users_net
      - kafka_net
      - gateway_net
    depends_on:
      - users-db
      - kafka
  users-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: user_api
    volumes:
      - users_pgdata:/var/lib/postgresql/data
      - ./users-ms/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5434:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - users_net
  
  # Настройка микросервиса уроков
  schedule-ms:
    container_name: schedule-ms
    ports:
      - "5005:8080"
      - "5006:8001"
    environment:
      - ASPNETCORE_HTTPS_PORTS=8001
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_Kestrel__Certificates__Default__Path=./aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=123
      - ConnectionStrings__LessonDbContext=User ID=postgres;Password=postgres;Host=schedule-db;Port=5432;Database=postgres
    stdin_open: true
    tty: true
    build:
      context: ./schedule-ms-copy
      dockerfile: ../schedule-ms-Dockerfile
    networks:
      - schedule_net
      - gateway_net
      - kafka_net
    depends_on:
      - schedule-db
      - kafka
  schedule-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - schedule_pgdata:/var/lib/postgresql/data
      - ./schedule-ms/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5435:5432
    networks:
      - schedule_net
        
  # Настройка кафки
  kafka-controller:
    image: docker.io/bitnami/kafka:3.7
    container_name: kafka-controller
    ports:
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-controller:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
    volumes:
      - kafka_controller_data:/bitnami/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api.sh", "--bootstrap-server", "kafka-controller:9093", "--command", "cluster-id"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - kafka_net

  kafka:
    image: docker.io/bitnami/kafka:3.7
    restart: always
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-controller:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka1_data:/bitnami/kafka/data
    networks:
      - kafka_net
